{
  "sample_repo_data": {
    "repo_id": "test-repo-123",
    "project_name": "Sample Express API",
    "description": "A sample Express.js API with MongoDB integration for testing MCP generation",
    "files": {
      "package.json": {
        "name": "sample-express-api",
        "version": "1.0.0",
        "description": "A sample Express.js API with MongoDB",
        "main": "server.js",
        "scripts": {
          "start": "node server.js",
          "dev": "nodemon server.js",
          "test": "jest",
          "build": "webpack --mode production"
        },
        "dependencies": {
          "express": "^4.18.2",
          "mongoose": "^7.5.0",
          "cors": "^2.8.5",
          "helmet": "^7.0.0",
          "dotenv": "^16.3.1"
        },
        "devDependencies": {
          "nodemon": "^3.0.1",
          "jest": "^29.6.2",
          "supertest": "^6.3.3"
        }
      },
      "server.js": "const express = require('express');\nconst mongoose = require('mongoose');\nconst cors = require('cors');\nconst helmet = require('helmet');\nrequire('dotenv').config();\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\n// Middleware\napp.use(helmet());\napp.use(cors());\napp.use(express.json());\n\n// Connect to MongoDB\nmongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/sample-api');\n\n// User Schema\nconst userSchema = new mongoose.Schema({\n  name: { type: String, required: true },\n  email: { type: String, required: true, unique: true },\n  age: { type: Number, min: 0 },\n  createdAt: { type: Date, default: Date.now },\n  updatedAt: { type: Date, default: Date.now }\n});\n\nconst User = mongoose.model('User', userSchema);\n\n// Routes\napp.get('/api/health', (req, res) => {\n  res.json({ status: 'OK', timestamp: new Date().toISOString() });\n});\n\napp.get('/api/users', async (req, res) => {\n  try {\n    const { page = 1, limit = 10, search } = req.query;\n    const query = search ? { name: { $regex: search, $options: 'i' } } : {};\n    \n    const users = await User.find(query)\n      .limit(limit * 1)\n      .skip((page - 1) * limit)\n      .sort({ createdAt: -1 });\n    \n    const total = await User.countDocuments(query);\n    \n    res.json({\n      users,\n      totalPages: Math.ceil(total / limit),\n      currentPage: page,\n      total\n    });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\napp.post('/api/users', async (req, res) => {\n  try {\n    const user = new User(req.body);\n    await user.save();\n    res.status(201).json(user);\n  } catch (error) {\n    if (error.code === 11000) {\n      res.status(400).json({ error: 'Email already exists' });\n    } else {\n      res.status(400).json({ error: error.message });\n    }\n  }\n});\n\napp.get('/api/users/:id', async (req, res) => {\n  try {\n    const user = await User.findById(req.params.id);\n    if (!user) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n    res.json(user);\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\napp.put('/api/users/:id', async (req, res) => {\n  try {\n    const user = await User.findByIdAndUpdate(\n      req.params.id,\n      { ...req.body, updatedAt: new Date() },\n      { new: true, runValidators: true }\n    );\n    \n    if (!user) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n    \n    res.json(user);\n  } catch (error) {\n    res.status(400).json({ error: error.message });\n  }\n});\n\napp.delete('/api/users/:id', async (req, res) => {\n  try {\n    const user = await User.findByIdAndDelete(req.params.id);\n    if (!user) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n    res.json({ message: 'User deleted successfully' });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Error handling middleware\napp.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(500).json({ error: 'Something went wrong!' });\n});\n\n// 404 handler\napp.use('*', (req, res) => {\n  res.status(404).json({ error: 'Route not found' });\n});\n\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n  console.log(`Health check: http://localhost:${PORT}/api/health`);\n});",
      "README.md": "# Sample Express API\n\nA sample Express.js API with MongoDB integration for testing MCP generation.\n\n## Features\n\n- RESTful API endpoints for user management\n- MongoDB integration with Mongoose\n- Input validation and error handling\n- CORS and security middleware\n- Health check endpoint\n- Pagination and search functionality\n\n## API Endpoints\n\n### Health Check\n- `GET /api/health` - Check API health status\n\n### Users\n- `GET /api/users` - List all users (with pagination and search)\n- `POST /api/users` - Create a new user\n- `GET /api/users/:id` - Get user by ID\n- `PUT /api/users/:id` - Update user by ID\n- `DELETE /api/users/:id` - Delete user by ID\n\n## Environment Variables\n\n```bash\nPORT=3000\nMONGODB_URI=mongodb://localhost:27017/sample-api\n```\n\n## Installation\n\n```bash\nnpm install\n```\n\n## Usage\n\n```bash\n# Development\nnpm run dev\n\n# Production\nnpm start\n\n# Testing\nnpm test\n```\n\n## Docker\n\n```bash\n# Build image\ndocker build -t sample-express-api .\n\n# Run container\ndocker run -p 3000:3000 sample-express-api\n```",
      "Dockerfile": "FROM node:18-alpine\n\n# Set working directory\nWORKDIR /app\n\n# Copy package files\nCOPY package*.json ./\n\n# Install dependencies\nRUN npm ci --only=production\n\n# Copy source code\nCOPY . .\n\n# Create non-root user\nRUN addgroup -g 1001 -S nodejs\nRUN adduser -S nodejs -u 1001\n\n# Change ownership\nRUN chown -R nodejs:nodejs /app\nUSER nodejs\n\n# Expose port\nEXPOSE 3000\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n  CMD curl -f http://localhost:3000/api/health || exit 1\n\n# Start application\nCMD [\"npm\", \"start\"]",
      "docker-compose.yml": "version: '3.8'\n\nservices:\n  api:\n    build: .\n    ports:\n      - \"3000:3000\"\n    environment:\n      - NODE_ENV=production\n      - MONGODB_URI=mongodb://mongo:27017/sample-api\n    depends_on:\n      - mongo\n    restart: unless-stopped\n\n  mongo:\n    image: mongo:6.0\n    ports:\n      - \"27017:27017\"\n    volumes:\n      - mongo_data:/data/db\n    restart: unless-stopped\n\nvolumes:\n  mongo_data:",
      "tests/user.test.js": "const request = require('supertest');\nconst app = require('../server');\n\ndescribe('User API', () => {\n  beforeEach(async () => {\n    // Clean up database before each test\n    await User.deleteMany({});\n  });\n\n  describe('GET /api/users', () => {\n    it('should return empty array when no users exist', async () => {\n      const res = await request(app)\n        .get('/api/users')\n        .expect(200);\n      \n      expect(res.body.users).toEqual([]);\n      expect(res.body.total).toBe(0);\n    });\n\n    it('should return users with pagination', async () => {\n      // Create test users\n      const users = [\n        { name: 'John Doe', email: 'john@example.com', age: 30 },\n        { name: 'Jane Smith', email: 'jane@example.com', age: 25 }\n      ];\n      \n      for (const user of users) {\n        await request(app)\n          .post('/api/users')\n          .send(user)\n          .expect(201);\n      }\n      \n      const res = await request(app)\n        .get('/api/users')\n        .expect(200);\n      \n      expect(res.body.users).toHaveLength(2);\n      expect(res.body.total).toBe(2);\n    });\n  });\n\n  describe('POST /api/users', () => {\n    it('should create a new user', async () => {\n      const userData = {\n        name: 'Test User',\n        email: 'test@example.com',\n        age: 28\n      };\n      \n      const res = await request(app)\n        .post('/api/users')\n        .send(userData)\n        .expect(201);\n      \n      expect(res.body.name).toBe(userData.name);\n      expect(res.body.email).toBe(userData.email);\n      expect(res.body.age).toBe(userData.age);\n      expect(res.body._id).toBeDefined();\n    });\n\n    it('should return error for duplicate email', async () => {\n      const userData = {\n        name: 'Test User',\n        email: 'test@example.com',\n        age: 28\n      };\n      \n      // Create first user\n      await request(app)\n        .post('/api/users')\n        .send(userData)\n        .expect(201);\n      \n      // Try to create user with same email\n      const res = await request(app)\n        .post('/api/users')\n        .send(userData)\n        .expect(400);\n      \n      expect(res.body.error).toBe('Email already exists');\n    });\n  });\n});",
      ".env.example": "PORT=3000\nMONGODB_URI=mongodb://localhost:27017/sample-api\nNODE_ENV=development"
    },
    "analysis": {
      "languages": ["JavaScript", "JSON", "YAML"],
      "config_files": ["package.json", "Dockerfile", "docker-compose.yml", ".env.example"],
      "file_count": 7,
      "size_bytes": 15420,
      "frameworks": ["Express.js", "Mongoose"],
      "hasPackageJson": true,
      "hasDockerfile": true,
      "hasDockerCompose": true,
      "hasTests": true
    },
    "tree_structure": "sample-express-api/\n├── package.json\n├── server.js\n├── README.md\n├── Dockerfile\n├── docker-compose.yml\n├── tests/\n│   └── user.test.js\n└── .env.example",
    "important_files": [
      "package.json:{\"name\":\"sample-express-api\",\"version\":\"1.0.0\",\"description\":\"A sample Express.js API with MongoDB\",\"main\":\"server.js\",\"scripts\":{\"start\":\"node server.js\",\"dev\":\"nodemon server.js\",\"test\":\"jest\",\"build\":\"webpack --mode production\"},\"dependencies\":{\"express\":\"^4.18.2\",\"mongoose\":\"^7.5.0\",\"cors\":\"^2.8.5\",\"helmet\":\"^7.0.0\",\"dotenv\":\"^16.3.1\"},\"devDependencies\":{\"nodemon\":\"^3.0.1\",\"jest\":\"^29.6.2\",\"supertest\":\"^6.3.3\"}}",
      "server.js:const express = require('express');\nconst mongoose = require('mongoose');\nconst cors = require('cors');\nconst helmet = require('helmet');\nrequire('dotenv').config();\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\n// Middleware\napp.use(helmet());\napp.use(cors());\napp.use(express.json());\n\n// Connect to MongoDB\nmongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/sample-api');\n\n// User Schema\nconst userSchema = new mongoose.Schema({\n  name: { type: String, required: true },\n  email: { type: String, required: true, unique: true },\n  age: { type: Number, min: 0 },\n  createdAt: { type: Date, default: Date.now },\n  updatedAt: { type: Date, default: Date.now }\n});\n\nconst User = mongoose.model('User', userSchema);\n\n// Routes\napp.get('/api/health', (req, res) => {\n  res.json({ status: 'OK', timestamp: new Date().toISOString() });\n});\n\napp.get('/api/users', async (req, res) => {\n  try {\n    const { page = 1, limit = 10, search } = req.query;\n    const query = search ? { name: { $regex: search, $options: 'i' } } : {};\n    \n    const users = await User.find(query)\n      .limit(limit * 1)\n      .skip((page - 1) * limit)\n      .sort({ createdAt: -1 });\n    \n    const total = await User.countDocuments(query);\n    \n    res.json({\n      users,\n      totalPages: Math.ceil(total / limit),\n      currentPage: page,\n      total\n    });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\napp.post('/api/users', async (req, res) => {\n  try {\n    const user = new User(req.body);\n    await user.save();\n    res.status(201).json(user);\n  } catch (error) {\n    if (error.code === 11000) {\n      res.status(400).json({ error: 'Email already exists' });\n    } else {\n      res.status(400).json({ error: error.message });\n    }\n  }\n});\n\napp.get('/api/users/:id', async (req, res) => {\n  try {\n    const user = await User.findById(req.params.id);\n    if (!user) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n    res.json(user);\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\napp.put('/api/users/:id', async (req, res) => {\n  try {\n    const user = await User.findByIdAndUpdate(\n      req.params.id,\n      { ...req.body, updatedAt: new Date() },\n      { new: true, runValidators: true }\n    );\n    \n    if (!user) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n    \n    res.json(user);\n  } catch (error) {\n    res.status(400).json({ error: error.message });\n  }\n});\n\napp.delete('/api/users/:id', async (req, res) => {\n  try {\n    const user = await User.findByIdAndDelete(req.params.id);\n    if (!user) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n    res.json({ message: 'User deleted successfully' });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Error handling middleware\napp.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(500).json({ error: 'Something went wrong!' });\n});\n\n// 404 handler\napp.use('*', (req, res) => {\n  res.status(404).json({ error: 'Route not found' });\n});\n\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n  console.log(`Health check: http://localhost:${PORT}/api/health`);\n});",
      "README.md:# Sample Express API\n\nA sample Express.js API with MongoDB integration for testing MCP generation.\n\n## Features\n\n- RESTful API endpoints for user management\n- MongoDB integration with Mongoose\n- Input validation and error handling\n- CORS and security middleware\n- Health check endpoint\n- Pagination and search functionality\n\n## API Endpoints\n\n### Health Check\n- `GET /api/health` - Check API health status\n\n### Users\n- `GET /api/users` - List all users (with pagination and search)\n- `POST /api/users` - Create a new user\n- `GET /api/users/:id` - Get user by ID\n- `PUT /api/users/:id` - Update user by ID\n- `DELETE /api/users/:id` - Delete user by ID\n\n## Environment Variables\n\n```bash\nPORT=3000\nMONGODB_URI=mongodb://localhost:27017/sample-api\n```\n\n## Installation\n\n```bash\nnpm install\n```\n\n## Usage\n\n```bash\n# Development\nnpm run dev\n\n# Production\nnpm start\n\n# Testing\nnpm test\n```\n\n## Docker\n\n```bash\n# Build image\ndocker build -t sample-express-api .\n\n# Run container\ndocker run -p 3000:3000 sample-express-api\n```"
    ]
  },
  "expected_mcp_tools": [
    {
      "name": "health-check",
      "title": "Health Check",
      "description": "Check the health status of the API server",
      "input_schema": {},
      "purpose": "Monitor API server health and availability",
      "implementation_hint": "Call GET /api/health endpoint"
    },
    {
      "name": "list-users",
      "title": "List Users",
      "description": "Retrieve a list of users with optional pagination and search",
      "input_schema": {
        "page": "number",
        "limit": "number",
        "search": "string"
      },
      "purpose": "Browse and search through user records",
      "implementation_hint": "Call GET /api/users with query parameters"
    },
    {
      "name": "create-user",
      "title": "Create User",
      "description": "Create a new user in the system",
      "input_schema": {
        "name": "string",
        "email": "string",
        "age": "number"
      },
      "purpose": "Add new users to the system",
      "implementation_hint": "Call POST /api/users with user data"
    },
    {
      "name": "get-user",
      "title": "Get User",
      "description": "Retrieve a specific user by ID",
      "input_schema": {
        "id": "string"
      },
      "purpose": "Get detailed information about a specific user",
      "implementation_hint": "Call GET /api/users/:id endpoint"
    },
    {
      "name": "update-user",
      "title": "Update User",
      "description": "Update an existing user's information",
      "input_schema": {
        "id": "string",
        "name": "string",
        "email": "string",
        "age": "number"
      },
      "purpose": "Modify user information",
      "implementation_hint": "Call PUT /api/users/:id with updated data"
    },
    {
      "name": "delete-user",
      "title": "Delete User",
      "description": "Remove a user from the system",
      "input_schema": {
        "id": "string"
      },
      "purpose": "Remove users from the system",
      "implementation_hint": "Call DELETE /api/users/:id endpoint"
    },
    {
      "name": "run-tests",
      "title": "Run Tests",
      "description": "Execute the test suite for the API",
      "input_schema": {},
      "purpose": "Validate API functionality through automated tests",
      "implementation_hint": "Execute npm test command"
    },
    {
      "name": "docker-build",
      "title": "Docker Build",
      "description": "Build Docker image for the API",
      "input_schema": {
        "tag": "string"
      },
      "purpose": "Create containerized version of the API",
      "implementation_hint": "Execute docker build command with specified tag"
    }
  ],
  "test_scenarios": [
    {
      "name": "Basic Analysis Test",
      "description": "Test basic repository analysis without OpenAI",
      "input": {
        "repo_id": "test-repo-123",
        "files": "sample_repo_data.files",
        "project_name": "Sample Express API"
      },
      "expected_output": {
        "success": true,
        "mcp_tools_count": ">= 5",
        "has_dockerfile": true
      }
    },
    {
      "name": "Structured Data Analysis Test",
      "description": "Test analysis using structured data from Rust operations",
      "input": {
        "repo_id": "test-repo-123",
        "analysis": "sample_repo_data.analysis",
        "tree_structure": "sample_repo_data.tree_structure",
        "important_files": "sample_repo_data.important_files"
      },
      "expected_output": {
        "success": true,
        "mcp_tools_count": ">= 6",
        "ai_analysis_confidence": ">= 0.7"
      }
    },
    {
      "name": "CLI Health Check Test",
      "description": "Test CLI health check command",
      "command": "python3 main.py health-check",
      "expected_output": {
        "success": true,
        "service": "llm-agent"
      }
    },
    {
      "name": "CLI Analyze Command Test",
      "description": "Test CLI analyze command with sample data",
      "command": "python3 main.py analyze",
      "input_data": "sample_repo_data",
      "expected_output": {
        "success": true,
        "repo_id": "test-repo-123"
      }
    }
  ]
}
