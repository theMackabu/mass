import{z as l}from"https://esm.sh/zod@3";import{StreamableHTTPTransport as $}from"https://esm.sh/@hono/mcp";import{McpServer as C,ResourceTemplate as D}from"https://esm.sh/@modelcontextprotocol/sdk/server/mcp";class b{constructor(){this.containers=new Map,this.nextPort=3001}generateContainerName(e){return`mass-${e}-${Date.now()}`}async buildImage(e,r,n){const s=this.generateContainerName(e),o=`mass/${e}:latest`;try{const a=`/tmp/mass-build-${s}`;return console.log(`Building image ${o} for repository ${e}`),console.log(`Dockerfile preview:
${r.slice(0,300)}...`),{success:!0,imageName:o,containerName:s,buildLog:`Successfully built image ${o}`}}catch(a){throw new Error(`Failed to build image: ${a.message}`)}}async deployContainer(e,r,n={}){const s=this.generateContainerName(e),o=n.port||this.nextPort++;try{const a={id:s,imageName:r,port:o,status:"running",createdAt:new Date().toISOString(),repoId:e,config:n};return this.containers.set(s,a),console.log(`Deployed container ${s} on port ${o}`),{success:!0,containerId:s,port:o,url:`http://localhost:${o}`,status:"running"}}catch(a){throw new Error(`Failed to deploy container: ${a.message}`)}}async stopContainer(e){const r=this.containers.get(e);if(!r)throw new Error(`Container ${e} not found`);try{return console.log(`Stopping container ${e}`),r.status="stopped",r.stoppedAt=new Date().toISOString(),{success:!0,containerId:e,message:"Container stopped successfully"}}catch(n){throw new Error(`Failed to stop container: ${n.message}`)}}listContainers(e=null){const r=Array.from(this.containers.values());return e?r.filter(n=>n.repoId===e):r}async getContainerLogs(e){const r=this.containers.get(e);if(!r)throw new Error(`Container ${e} not found`);return[`[${new Date().toISOString()}] Container ${e} started`,`[${new Date().toISOString()}] Listening on port ${r.port}`,`[${new Date().toISOString()}] Service ready`].join(`
`)}async healthCheck(e){const r=this.containers.get(e);return r?{healthy:r.status==="running",status:r.status,uptime:r.createdAt,port:r.port}:{healthy:!1,error:"Container not found"}}}function T(t,e){const r=(e||"").replace(/^\/+/,"").replace(/\\/g,"/"),n=`${t}/${r}`.replace(/\/+/g,"/"),s=t.replace(/\/+$/,"");if(!n.replace(/\/+$/,"").startsWith(s))throw new Error("Path outside workspace root");return n}function k(t){const e=[".ts",".tsx",".js",".jsx",".json",".md",".txt",".yml",".yaml",".toml",".py",".rs",".go",".java",".css",".scss",".html",".svg",".xml",".sh",".bash"],r=t.toLowerCase().substring(t.lastIndexOf("."));return e.includes(r)}async function h(t,e,r=y){try{const s=new Deno.Command(t,{args:e,cwd:r,stdout:"piped",stderr:"piped"}).spawn(),{code:o,stdout:a,stderr:i}=await s.output(),c=new TextDecoder().decode(a),p=new TextDecoder().decode(i);return{code:o,output:c,error:p}}catch(n){return{code:-1,output:"",error:n.message}}}async function E(t){try{const r=new Deno.Command("tree",{args:["-a","-I","node_modules|target|.git|__pycache__|.venv|venv|dist|build","-L","4","--dirsfirst","-F",t],stdout:"piped",stderr:"piped"}).spawn(),{code:n,stdout:s,stderr:o}=await r.output();return n===0?new TextDecoder().decode(s):await v(t)}catch(e){return console.warn("Tree command failed, using fallback:",e),await v(t)}}async function v(t){try{const r=new Deno.Command("find",{args:[t,"-type","f","-not","-path","*/node_modules/*","-not","-path","*/target/*","-not","-path","*/.git/*","-not","-path","*/__pycache__/*","-maxdepth","3"],stdout:"piped",stderr:"piped"}).spawn(),{code:n,stdout:s}=await r.output();return n===0?new TextDecoder().decode(s):"Could not generate repository structure"}catch(e){return`Error generating repository listing: ${e.message}`}}async function O(t,e){const r=Date.now(),s=`/tmp/${`repo-${t}-${r}.tar.gz`}`;try{const a=new Deno.Command("tar",{args:["-czf",s,"--exclude=node_modules","--exclude=target","--exclude=.git","--exclude=__pycache__","--exclude=.venv","--exclude=venv","--exclude=dist","--exclude=build","--exclude=*.log","-C",e,"."],stdout:"piped",stderr:"piped"}).spawn(),{code:i,stderr:c}=await a.output();if(i!==0){const p=new TextDecoder().decode(c);throw new Error(`Tar command failed: ${p}`)}return s}catch(o){throw new Error(`Failed to create repository archive: ${o.message}`)}}const f=new C({name:"mass",version:MASS.config.version()}),y=Deno.env.get("WORKSPACE_ROOT")||Deno.cwd();f.registerResource("repo",new D("repo://{path}",{list:{path:""}}),{title:"Repository",description:"Browse and read files from the current repository workspace"},async(t,{path:e})=>{try{const r=T(y,e||"");let n;try{n=await Deno.stat(r)}catch{throw new Error(`File not found: ${e||"root"}`)}if(n.isDirectory){const s=[];for await(const o of Deno.readDir(r)){if(o.name.startsWith(".")||o.name==="node_modules"||o.name==="target"||o.name==="__pycache__"||o.name===".venv"||o.name==="venv"||o.name==="dist"||o.name==="build")continue;const a=e?`${e}/${o.name}`:o.name,i=`${r}/${o.name}`;let c;try{c=await Deno.stat(i)}catch{continue}s.push({name:o.name,path:a,isDirectory:o.isDirectory,size:c.size,modified:c.mtime?.toISOString(),uri:`repo://${a}`})}return{contents:[{uri:t.href,mimeType:"application/json",text:JSON.stringify(s,null,2)}]}}if(n.isFile){const s=await Deno.readFile(r);if(k(r)){const o=new TextDecoder().decode(s);return{contents:[{uri:t.href,mimeType:"text/plain",text:o}]}}else{const o=new Uint8Array(s),a=Array.from(o,c=>String.fromCharCode(c)).join(""),i=btoa(a);return{contents:[{uri:t.href,mimeType:"application/octet-stream",blob:i}]}}}throw new Error(`Invalid file type: ${e||"root"}`)}catch(r){throw new Error(`Failed to read resource: ${r.message}`)}});const m=new Map,w=new b;f.registerTool("generate-mcp-server",{title:"Generate Complete MCP Server",description:"Analyze repository and generate complete MCP server with tools and documentation",inputSchema:{repoId:l.string().describe("Unique identifier for the repository"),projectName:l.string().optional().describe("Optional project name"),description:l.string().optional().describe("Optional project description"),maxFiles:l.number().optional().describe("Maximum important files to extract (default: 20)")}},async({repoId:t,projectName:e,description:r,maxFiles:n=20})=>{try{const s=await E(y),o=await O(t,y),a=`/tmp/mass-analysis-${t}-${Date.now()}`;await MASS.ops.op_extract_tar_gz(o,a);const i=await MASS.ops.op_analyze_repository(a);let c=[],p="";try{const u={repo_id:t,project_name:e,description:r,tree_structure:s,analysis:i,openai_api_key:Deno.env.get("OPENAI_API_KEY")||"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",openai_base_url:Deno.env.get("OPENAI_BASE_URL")||"https://api.groq.com/openai/v1",openai_model:Deno.env.get("OPENAI_MODEL")||"openai/gpt-oss-120b"},S=new Deno.Command("uv",{args:["run","agent.py","select-files"],stdin:"piped",stdout:"piped",stderr:"piped",cwd:`${Deno.cwd()}/llm`}).spawn(),_=S.stdin.getWriter();await _.write(new TextEncoder().encode(JSON.stringify(u))),await _.close();const x=await S.output();x.code===0?(c=JSON.parse(new TextDecoder().decode(x.stdout)).selected_files||[],console.log(`LLM selected ${c.length} files for analysis`)):(console.warn("LLM file selection failed, falling back to pattern-based selection"),p=await MASS.ops.op_get_important_files_by_pattern(a,n)),c.length>0&&(p=await MASS.ops.op_get_important_files(a,c))}catch(u){console.warn("LLM file selection failed:",u),p=await MASS.ops.op_get_important_files_by_pattern(a,n)}m.set(t,{id:t,projectName:e,description:r,archivePath:o,treeStructure:s,analysis:i,importantFiles:p.split(`
---FILE_SEPARATOR---
`).filter(u=>u.trim()),storedAt:new Date().toISOString(),workspacePath:y});const d=await A(t),g=m.get(t);return g.generatedTools=d.mcp_tools||[],g.documentation=d.documentation||{},g.serverTemplate=d.server_template||{},m.set(t,g),await MASS.ops.op_cleanup_temp_directory(a),{content:[{type:"text",text:JSON.stringify({success:!0,repoId:t,analysis:{file_count:i.file_count,languages:i.languages,config_files:i.config_files,size_bytes:i.size_bytes,frameworks:i.frameworks||[]},generatedTools:d.mcp_tools?.map(u=>({name:u.name,title:u.title,description:u.description,input_schema:u.input_schema,category:u.category,usage:`await mcp.callTool('${u.name}', ${JSON.stringify(u.example_input||{})})`}))||[],documentation:d.documentation||{},serverGenerated:!!d.server_template,toolsCount:d.mcp_tools?.length||0,message:`Generated complete MCP server with ${d.mcp_tools?.length||0} tools and comprehensive documentation. Ready for deployment.`},null,2)}]}}catch(s){return{content:[{type:"text",text:JSON.stringify({success:!1,error:s.message,repoId:t},null,2)}]}}}),f.registerTool("deploy-repository",{title:"Store and Deploy Repository Container",description:"Store external repository structure and deploy as regular application container (not MCP server)",inputSchema:{repoId:l.string().describe("Unique identifier for the repository"),files:l.record(l.string()).describe("Object mapping file paths to their content"),projectName:l.string().optional().describe("Optional project name"),description:l.string().optional().describe("Optional project description"),port:l.number().optional().describe("Port to expose (optional)")}},async({repoId:t,files:e,projectName:r,description:n,port:s})=>{try{let o=m.get(t);if(!o){const c=P(e),p=N(e);o={id:t,projectName:r,description:n,files:e,storedAt:new Date().toISOString(),fileStructure:c,apiEndpoints:p,workspacePath:null},m.set(t,o);try{const d=await R(o);o.dockerfile=d,m.set(t,o)}catch(d){console.warn(`Dockerfile generation failed for ${t}:`,d.message)}}if(!o.dockerfile)throw new Error(`No Dockerfile available for repository ${t}. Unable to deploy without build instructions.`);const a=await w.buildImage(t,o.dockerfile,o.files),i=await w.deployContainer(t,a.imageName,{port:s});return{content:[{type:"text",text:JSON.stringify({success:!0,repoId:t,filesStored:Object.keys(o.files).length,containerId:i.containerId,url:i.url,port:i.port,status:i.status,apiEndpoints:o.apiEndpoints?.length||0,languages:o.fileStructure?.languages||[],frameworks:o.fileStructure?.frameworks||[],message:"Repository stored and deployed successfully as application container"},null,2)}]}}catch(o){return{content:[{type:"text",text:JSON.stringify({success:!1,error:o.message,repoId:t},null,2)}]}}}),f.registerTool("list-repositories",{title:"List Stored Repositories",description:"List all stored repositories and their detailed analysis metadata",inputSchema:{}},async()=>{const t=Array.from(m.values()).map(e=>({id:e.id,projectName:e.projectName,description:e.description,storedAt:e.storedAt,analysis:e.analysis?{projectType:e.analysis.project_type,languages:e.analysis.languages,frameworks:e.analysis.frameworks||[],fileCount:e.analysis.file_count}:null,generatedToolsCount:e.generatedTools?.length||0,hasDockerfile:!!e.dockerfile,hasDeployment:!!e.deployment}));return{content:[{type:"text",text:JSON.stringify(t,null,2)}]}}),f.registerTool("get-generated-tools",{title:"Get Generated MCP Tools",description:"Get the AI-generated MCP tools for a specific repository",inputSchema:{repoId:l.string().describe("Repository ID")}},async({repoId:t})=>{const e=m.get(t);return e?{content:[{type:"text",text:JSON.stringify({success:!0,repoId:t,tools:e.generatedTools?.map(r=>({name:r.name,title:r.title,description:r.description,category:r.category,input_schema:r.input_schema}))||[],toolsCount:e.generatedTools?.length||0},null,2)}]}:{content:[{type:"text",text:JSON.stringify({success:!1,error:`Repository ${t} not found`},null,2)}]}});async function A(t){const e=m.get(t);if(!e)throw new Error(`Repository ${t} not found`);const r={repo_id:t,project_name:e.projectName,description:e.description,tree_structure:e.treeStructure,analysis:e.analysis,important_files:e.importantFiles.slice(0,15),workspace_path:e.workspacePath,openai_api_key:Deno.env.get("OPENAI_API_KEY")||"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",openai_base_url:Deno.env.get("OPENAI_BASE_URL")||"https://api.groq.com/openai/v1",openai_model:Deno.env.get("OPENAI_MODEL")||"openai/gpt-oss-120b"},s=new Deno.Command("uv",{args:["run","agent.py","analyze-and-generate"],stdin:"piped",stdout:"piped",stderr:"piped",cwd:`${Deno.cwd()}/llm`}).spawn(),o=s.stdin.getWriter(),a=new TextEncoder;await o.write(a.encode(JSON.stringify(r))),await o.close();const{code:i,stdout:c,stderr:p}=await s.output();if(i!==0){const u=new TextDecoder().decode(p);throw new Error(`Python agent failed: ${u}`)}const d=new TextDecoder().decode(c),g=JSON.parse(d);if(!g.success)throw new Error(`Python agent error: ${g.error}`);return e.generatedTools=g.mcp_tools,e.dockerfile=g.dockerfile,e.aiAnalysis=g.ai_analysis,m.set(t,e),g.mcp_tools}function P(t){const e={languages:new Set,frameworks:new Set,hasDockerfile:!1,hasPackageJson:!1,hasCargoToml:!1,hasPyprojectToml:!1,directories:new Set};for(const r in t){const n=r.split(".").pop()?.toLowerCase(),s=r.split("/").pop(),o=r.split("/").slice(0,-1).join("/");switch(o&&e.directories.add(o),n){case"js":case"ts":case"jsx":case"tsx":e.languages.add("JavaScript/TypeScript");break;case"py":e.languages.add("Python");break;case"rs":e.languages.add("Rust");break;case"go":e.languages.add("Go");break;case"java":e.languages.add("Java");break}s==="package.json"&&(e.hasPackageJson=!0),s==="Cargo.toml"&&(e.hasCargoToml=!0),s==="pyproject.toml"&&(e.hasPyprojectToml=!0),s==="Dockerfile"&&(e.hasDockerfile=!0);const a=t[r].toLowerCase();a.includes("react")&&e.frameworks.add("React"),a.includes("next")&&e.frameworks.add("Next.js"),a.includes("express")&&e.frameworks.add("Express"),a.includes("fastapi")&&e.frameworks.add("FastAPI"),a.includes("django")&&e.frameworks.add("Django"),a.includes("tokio")&&e.frameworks.add("Tokio")}return{...e,languages:Array.from(e.languages),frameworks:Array.from(e.frameworks),directories:Array.from(e.directories)}}function N(t){const e=[];for(const r in t){const n=t[r],s=n.matchAll(/(?:app|router)\.(get|post|put|delete|patch)\s*\(\s*['"`]([^'"`]+)['"`]/g);for(const a of s)e.push({method:a[1].toUpperCase(),path:a[2],file:r,framework:"Express"});const o=n.matchAll(/@app\.(get|post|put|delete|patch)\s*\(\s*['"`]([^'"`]+)['"`]/g);for(const a of o)e.push({method:a[1].toUpperCase(),path:a[2],file:r,framework:"FastAPI"});if(r.includes("/api/")&&(r.endsWith(".js")||r.endsWith(".ts"))){const a=r.replace(/.*\/api/,"").replace(/\.(js|ts)$/,"").replace(/\/index$/,"");e.push({method:"MULTIPLE",path:`/api${a||"/"}`,file:r,framework:"Next.js"})}}return e}async function R(t){const e={repo_id:t.id,project_name:t.projectName,description:t.description,files:t.files,file_structure:t.fileStructure,api_endpoints:t.apiEndpoints,openai_api_key:Deno.env.get("OPENAI_API_KEY"),openai_base_url:Deno.env.get("OPENAI_BASE_URL")||"https://api.groq.com/openai/v1",openai_model:Deno.env.get("OPENAI_MODEL")||"openai/gpt-oss-120b"},n=new Deno.Command("uv",{args:["run","agent.py","generate-dockerfile"],stdin:"piped",stdout:"piped",stderr:"piped",cwd:`${Deno.cwd()}/llm`}).spawn(),s=n.stdin.getWriter(),o=new TextEncoder;await s.write(o.encode(JSON.stringify(e))),await s.close();const{code:a,stdout:i,stderr:c}=await n.output();if(a!==0){const g=new TextDecoder().decode(c);throw new Error(`Python agent failed: ${g}`)}const p=new TextDecoder().decode(i),d=JSON.parse(p);if(!d.success)throw new Error(`Python agent error: ${d.error}`);return d.dockerfile||"# Dockerfile generation failed"}f.registerTool("list-containers",{title:"List Deployed Containers",description:"List all deployed containers and their status",inputSchema:{repoId:l.string().optional().describe("Filter by repository ID")}},async({repoId:t})=>{const e=w.listContainers(t);return{content:[{type:"text",text:JSON.stringify(e,null,2)}]}}),f.registerTool("stop-container",{title:"Stop Container",description:"Stop a deployed container",inputSchema:{containerId:l.string().describe("Container ID to stop")}},async({containerId:t})=>{try{const e=await w.stopContainer(t);return{content:[{type:"text",text:JSON.stringify(e,null,2)}]}}catch(e){return{content:[{type:"text",text:JSON.stringify({success:!1,error:e.message,containerId:t},null,2)}]}}}),f.registerTool("get-container-logs",{title:"Get Container Logs",description:"Retrieve logs from a deployed container",inputSchema:{containerId:l.string().describe("Container ID to get logs from")}},async({containerId:t})=>{try{return{content:[{type:"text",text:await w.getContainerLogs(t)}]}}catch(e){return{content:[{type:"text",text:`Error getting logs: ${e.message}`}]}}}),f.registerTool("deploy-mcp-server",{title:"Deploy Generated MCP Server",description:"Deploy the AI-generated MCP server for a repository as a standalone service",inputSchema:{repoId:l.string().describe("Repository ID with generated MCP server"),subdomain:l.string().optional().describe("Subdomain for the deployed server (auto-generated if not provided)"),port:l.number().optional().describe("Port for the deployed server (auto-assigned if not provided)")}},async({repoId:t,subdomain:e,port:r})=>{try{const n=m.get(t);if(!n)throw new Error(`Repository ${t} not found`);if(!n.serverTemplate||Object.keys(n.serverTemplate).length===0)throw new Error(`No MCP server template generated for repository ${t}. Run generate-mcp-server first.`);const s=e||`${t}-mcp`,o=r||3e3+Math.floor(Math.random()*1e3),a=`mcp-${t}-${Date.now()}`,i=`/tmp/mcp-deployments/${a}`;await M(n,i,o);const c=await j(a,i,o);return n.deployment={id:a,subdomain:s,port:o,url:`http://${s}.localhost:${o}`,containerId:c.containerId,deployedAt:new Date().toISOString(),status:"running"},m.set(t,n),{content:[{type:"text",text:JSON.stringify({success:!0,repoId:t,deployment:n.deployment,connectionInstructions:{httpConnection:{url:n.deployment.url,description:"Connect via HTTP for web integrations"},stdioConnection:{command:`deno run --allow-net ${n.deployment.url}/stdio`,description:"Connect via stdio for editors like Cursor"},dockerConnection:{command:`docker run -p ${o}:${o} mcp-server-${a}`,description:"Run locally with Docker"}},availableTools:n.generatedTools?.map(p=>p.name)||[],usageExample:{connect:`const mcp = new McpClient('${n.deployment.url}')`,callTool:n.generatedTools?.[0]?`await mcp.callTool('${n.generatedTools[0].name}', ${JSON.stringify(n.generatedTools[0].example_input||{})})`:"await mcp.callTool('generated-tool-name', {...})"},message:"MCP server deployed successfully! Connect using the instructions above."},null,2)}]}}catch(n){return{content:[{type:"text",text:JSON.stringify({success:!1,error:n.message,repoId:t},null,2)}]}}}),f.registerTool("get-documentation",{title:"Get Generated Documentation",description:"Retrieve the AI-generated documentation for a repository",inputSchema:{repoId:l.string().describe("Repository ID")}},async({repoId:t})=>{try{const e=m.get(t);if(!e)throw new Error(`Repository ${t} not found`);if(!e.documentation)throw new Error(`No documentation generated for repository ${t}. Run analyze-repository first.`);return{content:[{type:"text",text:e.documentation}]}}catch(e){return{content:[{type:"text",text:`Error retrieving documentation: ${e.message}`}]}}}),f.registerTool("list-deployed-servers",{title:"List Deployed MCP Servers",description:"List all deployed MCP servers with their status and URLs",inputSchema:{}},async()=>{const t=Array.from(m.values()).filter(e=>e.deployment).map(e=>({repoId:e.id,projectName:e.projectName,url:e.deployment.url,status:e.deployment.status,port:e.deployment.port,mcpTools:e.generatedTools?.length||0,deployedAt:e.deployment.deployedAt}));return{content:[{type:"text",text:JSON.stringify(t,null,2)}]}}),f.registerTool("calculate-bmi",{title:"BMI Calculator",description:"Calculate Body Mass Index",inputSchema:{weightKg:l.number(),heightM:l.number()}},async({weightKg:t,heightM:e})=>({content:[{type:"text",text:String(t/(e*e))}]}));async function M(t,e,r){try{await h("mkdir",["-p",e]);const n=t.serverTemplate;for(const[s,o]of Object.entries(n)){const a=`${e}/${s}`;await Deno.writeTextFile(a,o)}if(n["server.ts"]&&r!==3e3){let s=n["server.ts"];s=s.replace(/port.*?3000/g,`port: ${r}`),await Deno.writeTextFile(`${e}/server.ts`,s)}return{success:!0,deployDir:e,files:Object.keys(n)}}catch(n){throw new Error(`Failed to create MCP deployment: ${n.message}`)}}async function j(t,e,r){try{const n=`mcp-server-${t}`,s=`mcp-container-${t}`,o=await h("docker",["build","-t",n,e]);if(o.code!==0)throw new Error(`Docker build failed: ${o.error}`);const a=await h("docker",["run","-d","--name",s,"-p",`${r}:${r}`,"--restart","unless-stopped",n]);if(a.code!==0)throw new Error(`Docker run failed: ${a.error}`);return{success:!0,containerId:a.output.trim(),imageName:n,containerName:s,port:r}}catch(n){throw new Error(`Failed to deploy MCP container: ${n.message}`)}}export function setupMcpServer(t){return t}MASS.app.all("/socket",async t=>{const e=new $;return await f.connect(e),e.handleRequest(t)}),console.log(`Started server on port ${MASS.config.port()}`),Deno.serve({port:MASS.config.port()},MASS.app.fetch);